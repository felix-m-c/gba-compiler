# Generated from Slang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,198,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,4,23,131,8,23,11,23,12,23,132,1,23,1,23,
        1,23,1,23,4,23,139,8,23,11,23,12,23,140,1,23,1,23,1,23,1,23,4,23,
        147,8,23,11,23,12,23,148,3,23,151,8,23,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,3,24,162,8,24,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,26,1,26,5,26,173,8,26,10,26,12,26,176,9,26,1,26,3,26,179,
        8,26,1,27,1,27,4,27,183,8,27,11,27,12,27,184,1,28,4,28,188,8,28,
        11,28,12,28,189,1,29,4,29,193,8,29,11,29,12,29,194,1,29,1,29,0,0,
        30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,7,1,0,48,57,2,0,48,57,
        97,101,1,0,48,49,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,7,
        0,32,32,34,35,37,38,40,62,65,90,94,95,97,122,2,0,10,10,13,13,208,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,
        1,0,0,0,3,63,1,0,0,0,5,65,1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,73,
        1,0,0,0,13,75,1,0,0,0,15,81,1,0,0,0,17,84,1,0,0,0,19,89,1,0,0,0,
        21,97,1,0,0,0,23,99,1,0,0,0,25,102,1,0,0,0,27,105,1,0,0,0,29,107,
        1,0,0,0,31,109,1,0,0,0,33,111,1,0,0,0,35,113,1,0,0,0,37,115,1,0,
        0,0,39,117,1,0,0,0,41,119,1,0,0,0,43,125,1,0,0,0,45,127,1,0,0,0,
        47,150,1,0,0,0,49,161,1,0,0,0,51,163,1,0,0,0,53,178,1,0,0,0,55,180,
        1,0,0,0,57,187,1,0,0,0,59,192,1,0,0,0,61,62,5,123,0,0,62,2,1,0,0,
        0,63,64,5,125,0,0,64,4,1,0,0,0,65,66,5,100,0,0,66,67,5,101,0,0,67,
        68,5,102,0,0,68,6,1,0,0,0,69,70,5,40,0,0,70,8,1,0,0,0,71,72,5,44,
        0,0,72,10,1,0,0,0,73,74,5,41,0,0,74,12,1,0,0,0,75,76,5,119,0,0,76,
        77,5,104,0,0,77,78,5,105,0,0,78,79,5,108,0,0,79,80,5,101,0,0,80,
        14,1,0,0,0,81,82,5,105,0,0,82,83,5,102,0,0,83,16,1,0,0,0,84,85,5,
        101,0,0,85,86,5,108,0,0,86,87,5,115,0,0,87,88,5,101,0,0,88,18,1,
        0,0,0,89,90,5,114,0,0,90,91,5,101,0,0,91,92,5,116,0,0,92,93,5,117,
        0,0,93,94,5,114,0,0,94,95,5,110,0,0,95,96,5,40,0,0,96,20,1,0,0,0,
        97,98,5,61,0,0,98,22,1,0,0,0,99,100,5,61,0,0,100,101,5,61,0,0,101,
        24,1,0,0,0,102,103,5,33,0,0,103,104,5,61,0,0,104,26,1,0,0,0,105,
        106,5,38,0,0,106,28,1,0,0,0,107,108,5,94,0,0,108,30,1,0,0,0,109,
        110,5,124,0,0,110,32,1,0,0,0,111,112,5,43,0,0,112,34,1,0,0,0,113,
        114,5,45,0,0,114,36,1,0,0,0,115,116,5,42,0,0,116,38,1,0,0,0,117,
        118,5,47,0,0,118,40,1,0,0,0,119,120,5,98,0,0,120,121,5,121,0,0,121,
        122,5,116,0,0,122,123,5,101,0,0,123,124,5,115,0,0,124,42,1,0,0,0,
        125,126,5,91,0,0,126,44,1,0,0,0,127,128,5,93,0,0,128,46,1,0,0,0,
        129,131,7,0,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,
        132,133,1,0,0,0,133,151,1,0,0,0,134,135,5,48,0,0,135,136,5,120,0,
        0,136,138,1,0,0,0,137,139,7,1,0,0,138,137,1,0,0,0,139,140,1,0,0,
        0,140,138,1,0,0,0,140,141,1,0,0,0,141,151,1,0,0,0,142,143,5,48,0,
        0,143,144,5,98,0,0,144,146,1,0,0,0,145,147,7,2,0,0,146,145,1,0,0,
        0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,
        0,150,130,1,0,0,0,150,134,1,0,0,0,150,142,1,0,0,0,151,48,1,0,0,0,
        152,153,5,84,0,0,153,154,5,114,0,0,154,155,5,117,0,0,155,162,5,101,
        0,0,156,157,5,70,0,0,157,158,5,97,0,0,158,159,5,108,0,0,159,160,
        5,115,0,0,160,162,5,101,0,0,161,152,1,0,0,0,161,156,1,0,0,0,162,
        50,1,0,0,0,163,164,5,103,0,0,164,165,5,108,0,0,165,166,5,111,0,0,
        166,167,5,98,0,0,167,168,5,97,0,0,168,169,5,108,0,0,169,52,1,0,0,
        0,170,174,7,3,0,0,171,173,7,4,0,0,172,171,1,0,0,0,173,176,1,0,0,
        0,174,172,1,0,0,0,174,175,1,0,0,0,175,179,1,0,0,0,176,174,1,0,0,
        0,177,179,5,95,0,0,178,170,1,0,0,0,178,177,1,0,0,0,179,54,1,0,0,
        0,180,182,5,35,0,0,181,183,7,5,0,0,182,181,1,0,0,0,183,184,1,0,0,
        0,184,182,1,0,0,0,184,185,1,0,0,0,185,56,1,0,0,0,186,188,7,6,0,0,
        187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,
        190,58,1,0,0,0,191,193,5,32,0,0,192,191,1,0,0,0,193,194,1,0,0,0,
        194,192,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,6,29,0,0,
        197,60,1,0,0,0,11,0,132,140,148,150,161,174,178,184,189,194,1,0,
        1,0
    ]

class SlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    INT = 24
    BOOL = 25
    GLOBAL = 26
    IDENT = 27
    COMM = 28
    NEWLINE = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'def'", "'('", "','", "')'", "'while'", "'if'", 
            "'else'", "'return('", "'='", "'=='", "'!='", "'&'", "'^'", 
            "'|'", "'+'", "'-'", "'*'", "'/'", "'bytes'", "'['", "']'", 
            "'global'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "BOOL", "GLOBAL", "IDENT", "COMM", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "INT", "BOOL", "GLOBAL", "IDENT", 
                  "COMM", "NEWLINE", "WS" ]

    grammarFileName = "Slang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


